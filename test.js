(function () {
	'use strict';

	/* src/grid/Grid.html generated by Svelte v2.13.5 */

	class Column {
	  constructor(name, descr) {
	    this.name = name;
	    this.descr = descr;
	  }
	}
	class PersonService {
	  getPeople() {
	    return [
	      {firstName:'Joe',lastName:'Jackson',age:20},
	      {firstName:'Peter',lastName:'Smith',age:30},
	      {firstName:'Jane',lastName:'Doe',age:50},
	      {firstName:'Tim',lastName:'Smith',age:80}
	    ];
	    }

	    getColumns() {
	      return [
	        new Column('firstName','First Name'),
	        new Column('lastName','Last Name'),
	        new Column('age','Age')
	      ];
	    }
	}

	let personService = new PersonService();

	function data() {
	  return {
	    grid:{
	      rows: personService.getPeople(),
	      columns: personService.getColumns()
	    }
	  }
	}
	function create_main_fragment(component, ctx) {
		var div, div_1, table, thead, tr, text_2, tbody;

		var each_value = ctx.grid.columns;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		var each_value_1 = ctx.grid.rows;

		var each_1_blocks = [];

		for (var i = 0; i < each_value_1.length; i += 1) {
			each_1_blocks[i] = create_each_block_1(component, get_each_1_context(ctx, each_value_1, i));
		}

		return {
			c() {
				div = createElement("div");
				div_1 = createElement("div");
				table = createElement("table");
				thead = createElement("thead");
				tr = createElement("tr");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_2 = createText("\n       ");
				tbody = createElement("tbody");

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].c();
				}
				table.className = "table table-striped";
				div_1.className = "col-md-6";
				div.className = "row";
			},

			m(target, anchor) {
				insert(target, div, anchor);
				append(div, div_1);
				append(div_1, table);
				append(table, thead);
				append(thead, tr);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(tr, null);
				}

				append(table, text_2);
				append(table, tbody);

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].m(tbody, null);
				}
			},

			p(changed, ctx) {
				if (changed.grid) {
					each_value = ctx.grid.columns;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(tr, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}

				if (changed.grid) {
					each_value_1 = ctx.grid.rows;

					for (var i = 0; i < each_value_1.length; i += 1) {
						const child_ctx = get_each_1_context(ctx, each_value_1, i);

						if (each_1_blocks[i]) {
							each_1_blocks[i].p(changed, child_ctx);
						} else {
							each_1_blocks[i] = create_each_block_1(component, child_ctx);
							each_1_blocks[i].c();
							each_1_blocks[i].m(tbody, null);
						}
					}

					for (; i < each_1_blocks.length; i += 1) {
						each_1_blocks[i].d(1);
					}
					each_1_blocks.length = each_value_1.length;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				destroyEach(each_blocks, detach);

				destroyEach(each_1_blocks, detach);
			}
		};
	}

	// (6:14) {#each grid.columns as col}
	function create_each_block(component, ctx) {
		var td, text_value = ctx.col.descr, text;

		return {
			c() {
				td = createElement("td");
				text = createText(text_value);
			},

			m(target, anchor) {
				insert(target, td, anchor);
				append(td, text);
			},

			p(changed, ctx) {
				if ((changed.grid) && text_value !== (text_value = ctx.col.descr)) {
					setData(text, text_value);
				}
			},

			d(detach) {
				if (detach) {
					detachNode(td);
				}
			}
		};
	}

	// (12:10) {#each grid.rows as row}
	function create_each_block_1(component, ctx) {
		var tr, td, text_value = ctx.row.firstName, text, text_1, td_1, text_2_value = ctx.row.lastName, text_2, text_3, td_2, text_4_value = ctx.row.age, text_4;

		return {
			c() {
				tr = createElement("tr");
				td = createElement("td");
				text = createText(text_value);
				text_1 = createText("\n              ");
				td_1 = createElement("td");
				text_2 = createText(text_2_value);
				text_3 = createText("\n              ");
				td_2 = createElement("td");
				text_4 = createText(text_4_value);
			},

			m(target, anchor) {
				insert(target, tr, anchor);
				append(tr, td);
				append(td, text);
				append(tr, text_1);
				append(tr, td_1);
				append(td_1, text_2);
				append(tr, text_3);
				append(tr, td_2);
				append(td_2, text_4);
			},

			p(changed, ctx) {
				if ((changed.grid) && text_value !== (text_value = ctx.row.firstName)) {
					setData(text, text_value);
				}

				if ((changed.grid) && text_2_value !== (text_2_value = ctx.row.lastName)) {
					setData(text_2, text_2_value);
				}

				if ((changed.grid) && text_4_value !== (text_4_value = ctx.row.age)) {
					setData(text_4, text_4_value);
				}
			},

			d(detach) {
				if (detach) {
					detachNode(tr);
				}
			}
		};
	}

	function get_each_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.col = list[i];
		child_ctx.each_value = list;
		child_ctx.col_index = i;
		return child_ctx;
	}

	function get_each_1_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.row = list[i];
		child_ctx.each_value_1 = list;
		child_ctx.row_index = i;
		return child_ctx;
	}

	function Grid(options) {
		init(this, options);
		this._state = assign(data(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Grid.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	on: on,
	 	set: set,
	 	_set: _set,
	 	_stage: _stage,
	 	_mount: _mount,
	 	_differs: _differs
	 });

	Grid.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function setData(text, data) {
		text.data = '' + data;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function get() {
		return this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function noop() {}

	function blankObject() {
		return Object.create(null);
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	/* src/treeview/Treeview.html generated by Svelte v2.13.5 */

	function create_main_fragment$1(component, ctx) {
		var ul;

		var each_value = ctx.locations;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$1(component, get_each_context$1(ctx, each_value, i));
		}

		return {
			c() {
				ul = createElement$1("ul");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
			},

			m(target, anchor) {
				insert$1(target, ul, anchor);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul, null);
				}
			},

			p(changed, ctx) {
				if (changed.locations) {
					each_value = ctx.locations;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$1(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block$1(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(ul, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}
			},

			d(detach) {
				if (detach) {
					detachNode$1(ul);
				}

				destroyEach$1(each_blocks, detach);
			}
		};
	}

	// (2:2) {#each locations as loc}
	function create_each_block$1(component, ctx) {
		var li, text_value = ctx.loc.name, text, text_1;

		var treeview_initial_data = { locations: ctx.loc.locations };
		var treeview = new Treeview({
			root: component.root,
			store: component.store,
			data: treeview_initial_data
		});

		return {
			c() {
				li = createElement$1("li");
				text = createText$1(text_value);
				text_1 = createText$1("\n      ");
				treeview._fragment.c();
			},

			m(target, anchor) {
				insert$1(target, li, anchor);
				append$1(li, text);
				append$1(li, text_1);
				treeview._mount(li, null);
			},

			p(changed, ctx) {
				if ((changed.locations) && text_value !== (text_value = ctx.loc.name)) {
					setData$1(text, text_value);
				}

				var treeview_changes = {};
				if (changed.locations) treeview_changes.locations = ctx.loc.locations;
				treeview._set(treeview_changes);
			},

			d(detach) {
				if (detach) {
					detachNode$1(li);
				}

				treeview.destroy();
			}
		};
	}

	function get_each_context$1(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.loc = list[i];
		child_ctx.each_value = list;
		child_ctx.loc_index = i;
		return child_ctx;
	}

	function Treeview(options) {
		init$1(this, options);
		this._state = assign$1({}, options.data);
		this._intro = true;

		this._fragment = create_main_fragment$1(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush$1(this);
		}
	}

	assign$1(Treeview.prototype, {
	 	destroy: destroy$1,
	 	get: get$1,
	 	fire: fire$1,
	 	on: on$1,
	 	set: set$1,
	 	_set: _set$1,
	 	_stage: _stage$1,
	 	_mount: _mount$1,
	 	_differs: _differs$1
	 });

	Treeview.prototype._recompute = noop$1;

	function createElement$1(name) {
		return document.createElement(name);
	}

	function insert$1(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode$1(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach$1(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function createText$1(data) {
		return document.createTextNode(data);
	}

	function append$1(target, node) {
		target.appendChild(node);
	}

	function setData$1(text, data) {
		text.data = '' + data;
	}

	function init$1(component, options) {
		component._handlers = blankObject$1();
		component._slots = blankObject$1();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function assign$1(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function flush$1(component) {
		component._lock = true;
		callAll$1(component._beforecreate);
		callAll$1(component._oncreate);
		callAll$1(component._aftercreate);
		component._lock = false;
	}

	function destroy$1(detach) {
		this.destroy = noop$1;
		this.fire('destroy');
		this.set = noop$1;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function get$1() {
		return this._state;
	}

	function fire$1(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function on$1(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set$1(newState) {
		this._set(assign$1({}, newState));
		if (this.root._lock) return;
		flush$1(this.root);
	}

	function _set$1(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign$1(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign$1(assign$1({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage$1(newState) {
		assign$1(this._staged, newState);
	}

	function _mount$1(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _differs$1(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function noop$1() {}

	function blankObject$1() {
		return Object.create(null);
	}

	function callAll$1(fns) {
		while (fns && fns.length) fns.shift()();
	}

	class Location {
	  constructor(name, locations, visible) {
	    this.name = name;
	    this.locations = locations.map(l => new Location(l, [], false));
	  }

	  addLocation(name) {
	    let newLocation = new Location(name, [], false);
	    this.locations.push(newLocation);
	    return newLocation;
	  }
	  
	  getLocation(name) {
	    return this.locations.find(l => l.name === name);
	  }
	}

	class LocationService {
	  getLocations() {
	    let usa = new Location('USA', ['New York', 'Texas'], true);
	    let nyc = usa.getLocation('New York').addLocation('New York City');
	    nyc.addLocation('Brooklyn');
	    nyc.addLocation('Manhattan');
	    nyc.addLocation('Queens');
	    nyc.addLocation('Bronx');
	    nyc.addLocation('Staten Island');
	    usa.getLocation('Texas').addLocation('Houston');
	    usa.getLocation('Texas').addLocation('Austin');
	    usa.getLocation('Texas').addLocation('Dallas');
	    let germany = new Location('Germany', ['Berlin'], true);
	    let norway = new Location('Norway', ['Oslo'], true);
	    return [usa, germany, norway];
	  }
	}

	/* src/App.html generated by Svelte v2.13.5 */

	let locationService = new LocationService();
	let locations = locationService.getLocations();

	function data$1() {
	  return {
	    title: 'Svelte Demo Components',
	    locations: locations
	  }
	}
	function create_main_fragment$2(component, ctx) {
		var div, h1, text, text_1, h4, text_3, text_4, h4_1, text_6;

		var grid = new Grid({
			root: component.root,
			store: component.store
		});

		var treeview_initial_data = { locations: ctx.locations };
		var treeview = new Treeview({
			root: component.root,
			store: component.store,
			data: treeview_initial_data
		});

		return {
			c() {
				div = createElement$2("div");
				h1 = createElement$2("h1");
				text = createText$2(ctx.title);
				text_1 = createText$2("\n  \n    ");
				h4 = createElement$2("h4");
				h4.textContent = "Grid";
				text_3 = createText$2("\n    ");
				grid._fragment.c();
				text_4 = createText$2("\n\n    ");
				h4_1 = createElement$2("h4");
				h4_1.textContent = "Treeview";
				text_6 = createText$2("\n    ");
				treeview._fragment.c();
			},

			m(target, anchor) {
				insert$2(target, div, anchor);
				append$2(div, h1);
				append$2(h1, text);
				append$2(div, text_1);
				append$2(div, h4);
				append$2(div, text_3);
				grid._mount(div, null);
				append$2(div, text_4);
				append$2(div, h4_1);
				append$2(div, text_6);
				treeview._mount(div, null);
			},

			p(changed, ctx) {
				if (changed.title) {
					setData$2(text, ctx.title);
				}

				var treeview_changes = {};
				if (changed.locations) treeview_changes.locations = ctx.locations;
				treeview._set(treeview_changes);
			},

			d(detach) {
				if (detach) {
					detachNode$2(div);
				}

				grid.destroy();
				treeview.destroy();
			}
		};
	}

	function App(options) {
		init$2(this, options);
		this._state = assign$2(data$1(), options.data);
		this._intro = true;

		this._fragment = create_main_fragment$2(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush$2(this);
		}
	}

	assign$2(App.prototype, {
	 	destroy: destroy$2,
	 	get: get$2,
	 	fire: fire$2,
	 	on: on$2,
	 	set: set$2,
	 	_set: _set$2,
	 	_stage: _stage$2,
	 	_mount: _mount$2,
	 	_differs: _differs$2
	 });

	App.prototype._recompute = noop$2;

	function createElement$2(name) {
		return document.createElement(name);
	}

	function createText$2(data) {
		return document.createTextNode(data);
	}

	function insert$2(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function append$2(target, node) {
		target.appendChild(node);
	}

	function setData$2(text, data) {
		text.data = '' + data;
	}

	function detachNode$2(node) {
		node.parentNode.removeChild(node);
	}

	function init$2(component, options) {
		component._handlers = blankObject$2();
		component._slots = blankObject$2();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function assign$2(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function flush$2(component) {
		component._lock = true;
		callAll$2(component._beforecreate);
		callAll$2(component._oncreate);
		callAll$2(component._aftercreate);
		component._lock = false;
	}

	function destroy$2(detach) {
		this.destroy = noop$2;
		this.fire('destroy');
		this.set = noop$2;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function get$2() {
		return this._state;
	}

	function fire$2(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function on$2(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set$2(newState) {
		this._set(assign$2({}, newState));
		if (this.root._lock) return;
		flush$2(this.root);
	}

	function _set$2(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign$2(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign$2(assign$2({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage$2(newState) {
		assign$2(this._staged, newState);
	}

	function _mount$2(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _differs$2(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function noop$2() {}

	function blankObject$2() {
		return Object.create(null);
	}

	function callAll$2(fns) {
		while (fns && fns.length) fns.shift()();
	}

	var demoApp = new App({
	  target: document.querySelector( 'main' )
	});

}());
